#!/usr/bin/env python


from visualization_msgs.msg import Marker
from geometry_msgs.msg import Quaternion, Pose, Point, Vector3, PoseWithCovarianceStamped
from std_msgs.msg import Header, ColorRGBA
import rospy
from geometry_msgs.msg import Twist
from math import atan2, pi
from tf.transformations import euler_from_quaternion

def init():
    global pub, count 
    count = 0
    pub = rospy.Publisher('/mobile_base/commands/velocity', Twist, queue_size=1)
    rospy.init_node('listener', anonymous=True)
    rospy.Subscriber('/robot_pose_ekf/odom_combined', PoseWithCovarianceStamped, callback)
    rospy.spin()


def callback(data):
    global count, init, current, returnangle
   
    rospy.loginfo("received a callback")

    count += 1
    current = data

    if count == 1:
        init = data
    elif count == 250:
        calc_return_angle()
        rotate_back()
    elif count > 250:
        rotate_back()


def calc_return_angle():
    global init, current, returnangle
    deltax = current.pose.pose.position.x - init.pose.pose.position.x
    deltay = current.pose.pose.position.y - init.pose.pose.position.y
    returnangle = atan2(deltay, deltax)

def get_angle(pose):
    orient = pose.pose.pose.orientation
    return euler_from_quaternion([orient.w, orient.x, orient.y, orient.z])[0]

def rotate_back():    
    global pub, current, returnangle
    msg = Twist()
    cur = get_angle(current)
    ret = returnangle
    if cur < 0:
        cur = 2 * pi + cur
    if ret < 0:
        ret = 2 * pi + ret
    error = abs(cur - ret)
    rospy.loginfo(str(cur) + " " + str(ret) + " " + "Rotating. Angular error: " + str(error))
    
    if error > 0.05:
        msg.angular.z = 0.25
    pub.publish(msg)
    


#def __init__(self):
#    self.marker_publisher = rospy.Publisher('virtualization_marker', Marker)
#    marker = Marker(type=Marker.TEST_VIEW_FACING, id=0, 
#                    lifetime=rospy.Duration(1.5),
#                    pose=Pose(Point(0.5,0.5,1.45), Quaternion(0,0,0,1)),\
#                    scale=Vector3(0.06,0.06,0.06),
#                    header=Header(frame_id='base_link'), 
#                    color=ColorRGBA(0.0,1.0,0.0,0.8),text=text)
#    self.marker_publisher.publish(marker)

if __name__ == '__main__':
	try:
		init()
	except rospy.ROSInterruptException:
		pass


